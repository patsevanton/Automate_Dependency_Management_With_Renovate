 Привет, ребята, добро пожаловать на мой канал.
 Дополнительное управление в проектах кодов - это огромный труд.
 Даже довольно простые проекты часто содержат много разных дополнительных кодов
 и много разных версий различных пакетов, расположенных в проекте.
 Эти пакеты постоянно подвергаются новыми функциями,
 но также обеспечивают опасности, которые, в результате, возникают в этих пакетах.
 Даже если вы только следуете за одним или двум проектами,
 обострение этого может быстро стать значительным.
 Если у вас много проектов, то проблема становится еще хуже.
 К счастью, есть отличная решение.
 Автоматическая патча опасностей, используя RenovateBot.
 В этом видео мы будем исследовать, что такое RenovateBot и как он работает.
 Мы будем его установить в проекте GitHub,
 попробовать некоторые из самых огромных опций конфигурации, которые он позволяет,
 и поделиться с PR-ами, чтобы автоматически подавить опасности.
 Хорошо, давайте начнем.
 RenovateBot работает, когда вы вставляете простую приложение GitHub в ваш repository.
 Вы также можете установить его прямо с интерфейса командного линия,
 или даже если вы его устанавливаете самостоятельно.
 Но для этого видео мы будем использовать только приложение GitHub.
 Так что, когда приложение установлено и конфигурировано,
 оно будет регулярно сканировать ваш repository GitHub и смотреть на ваши зависимости.
 Оно будет смотреть на версии всех разных пакетов, которые вы используете.
 Если появится новая версия, она вызовет полный запрос, чтобы подавить опасность.
 Если вы чувствуете себя действительно милыми,
 вы можете даже конфигурировать полный запрос, чтобы автоматически быть смешаны.
 Это дает вам полностью автономное управление опасностями.
 Но чтобы быть полностью безопасными, вы, наверное, хотите проверить полный запрос,
 прежде чем его смешать,
 в случае, если какая-то версия будет подавлена к чему-то, чего вы не ожидали.
 Но все равно, это довольно круто, что вы можете это сделать.
 Ок, давайте начнем.
 Мы начнем с установки RenovateBot в репозиторию GitHub.
 Я сейчас на странице RenovateBot.
 Если вы пройдете по этой странице,
 вы можете просто перейти и прочитать немного о некоторых конфигурациях для RenovateBot.
 Так что, потому что я уже установил его,
 у меня есть кнопка, которая говорит "конфигурация".
 Если это ваш первый раз, когда используете RenovateBot,
 эта кнопка, наверное, говорит "установить".
 Просто нажмите на эту кнопку.
 Вы, возможно, должны вводить ваш паспорт GitHub,
 так что я просто вложу его сейчас.
 И потом мы перейдем на эту страницу.
 Если мы снова перейдем на нижнюю страницу,
 мы можем увидеть здесь, где нам запросили выбрать,
 какую репозиторию мы хотим установить.
 Для меня я буду установить ее против этой репозитории Rest Assured Fundamentals.
 И это репозитория, которую я держу для учения в одном из моих других курсов.
 Это довольно простая репозитория,
 она имеет немного Java-кода, и она построена с Maven, и так далее.
 Поэтому у нас должно быть несколько зависимостей, чтобы мы ее подавили.
 Просто нажмите на "Совести", и вот оно.
 Это должно быть RenovateBot, установленное на нашей репозитории.
 Что мы можем сделать сейчас,
 это проверить дашборд RenovateBot.
 Если мы произойдем в дашборд, то мы увидим здесь,
 и здесь мы можем увидеть все репозитории,
 которые мы добавили в RenovateBot.
 Мы можем увидеть, что Rest Assured Fundamentals 1
 был добавлен здесь вначале.
 И вот другие репозитории, которые я добавил раньше.
 Что происходит, когда вы установите реновать бот-апп, как мы уже сделали,
 то он вывозит пул-репозиторию в репозиторию,
 которая содержит начальную конфигурацию.
 Давайте посмотрим на это.
 Я здесь в репозитории, если я зайду в "Пул-репозитории",
 то мы видим, что у нас есть пул-репозитория для "Конфигурация Renovate".
 Если я нажму на "Применены файлы",
 то мы видим, что это будет добавлять начальную конфигурацию.
 Она не добавляет слишком много,
 она просто добавляет схему,
 и просто выходит из базы.
 В этом случае, если мы перейдем к документации RenovateBot,
 мы можем увидеть некоторые разные конфигурации,
 и мы можем увидеть, что здесь, наверное, сотни разных сеттингов,
 которые мы можем изменить здесь и конфигурировать здесь.
 Так что это дает нам огромную количество места для флексибилити.
 Важно отметить, что Renovate работает практически прямо из бока,
 но у вас есть много конфигураций, которые вы можете выбрать также.
 Чтобы сделать это проще для этого урока,
 мы добавим три различных дополнительных конфигурации.
 Мы добавим "PR-хеджер",
 и это добавит всех наших пул-репозиторий.
 Мы добавим некоторые лабели,
 и это лабели, которые появляются в пул-репозиториях,
 когда они возникают.
 Мы также добавим "Assignees"
 и это будет подключать пул-репозиторий к некоторым пользователям GitHub.
 Я снова на пул-репозиториях, смотря на Renovate.json,
 и я просто буду эдитировать этот файл.
 Я просто буду заменить первую конфигурацию,
 я просто буду заменить ее вот так.
 Давайте посмотрим, что мы добавили.
 Первое, что мы добавили в верху, это "PR-хеджер".
 Это добавит вверху каждого пул-репозитора
 "James Test Headers".
 Мы также добавили "Assignee"
 и я добавил его в GitHub-узерное место.
 Это означает, что все пул-репозиторы, которые появляются в моменте,
 будут подключены к мне.
 Я также добавил "Label"
 и добавил "Dependencies-Test Label".
 Это будет подключено каждому пул-репозитору, который появится.
 И если вы посмотрите под ним,
 я также подключил некоторые правила пакетов.
 Пакетные правила позволяют
 просто задавать пул-репозиторы
 по паттерну, которую мы подключаем.
 Например, я добавил один для Docker.
 Если пул-репозитор дотекирует Docker,
 то он будет ставить "Docker Test Label".
 Это будет подключено к "Dependencies-Test Label".
 Я также добавил один для "Maven"
 и это будет подключено к "Maven Test Label".
 Ок, давайте скачем эти изменения.
 Я просто скачу их прямо в эту бранчу.
 Если вернуться к пул-репозитору,
 мы готовы подключить эту бранчу.
 Я просто нажму "Продолжение изменений" и "Подпиши".
 Наконец, я просто нажму "Подключить пул-репозитор"
 и "Подключить".
 И вот и все.
 Реновейт-бот установлен и подключен.
 Если посмотреть немного больше на разговор
 в пул-репозиторе, который мы только что подключили,
 то он говорит, что он подключил этот пакет,
 этот "pom.xml", который является нашим "Maven" файлом,
 и он показывает нам, что мы можем ожидать.
 Мы можем ожидать, что эти зависимости будут подключены,
 когда мы подключим в "Renovate".
 Он также говорит, что пул-репозитор будет ограничен
 максимумом 2 часа,
 чтобы не обрушить нашу систему.
 Опять же, вы можете подключить это к какому-либо желанию.
 Если вернуться к пул-репозитору,
 мы видим, что несколько разных пул-репозиторов были подключены.
 Посмотрим на этот, который стоит на верху.
 И это будет подключить наш "JSON Schema Validator".
 Это будет подключить его от версии 5.2 до 5.3.
 И это дает нам еще больше информации.
 Так что, возраст новой версии пакета,
 процент адоптирования,
 и немного уверенности в том, как хорошо он был тестирован, и так далее.
 Если посмотреть здесь, мы также видим,
 что наш пул-репозитор был подключен к нашим пул-репозиторам.
 Он также дает нам этот лейбл, который мы подключили.
 Он подключен к лейблу "Дополнительные тесты".
 И мы также можем увидеть, что пул-репозитор автоматически подключен к моему пользователю.
 Если мы посмотрим на изменение файла,
 мы можем увидеть в пом.xml, что версия автоматически подключена для нас.
 Хорошо, это выглядит хорошо.
 Я буду идти дальше и смешать это.
 Я просто оправдываю пул-репозитор,
 и затем нажму "Смешать пул-репозитор".
 Сделаю также отрывок, чтобы было хорошо и чисто.
 И вот мы и есть. Отрывок смешан.
 Еще одна классная функция RenovateBot - это дешевая пул-репозиторная панель.
 Что это делает, это позволяет вам управлять и контролировать вашу активность Renovate.
 Это работает, добавляя вопрос в GitHub в ваш репозитор.
 Поэтому вам нужно уточнить, что у вас есть вопросы, которые вы включили.
 Это функция GitHub, чтобы вы включили их.
 Чтобы уточнить, что у нас есть вопросы, мы можем просто зайти в "Сетевки".
 Убедиться, что мы на "Генеральном" табе.
 Скролем вниз и убедимся, что вопросы здесь.
 Теперь если я перейду к "Вопросам",
 я могу увидеть, что у меня есть "Дополнительный дешевый пул-репозитор".
 Что это делает, это дает нам больше информации о том, как сетевать Renovate.
 Это показывает нам все открытые пул-репозиции,
 а также показывает нам дополнительные дешевые пул-репозиции.
 Если вы посмотрите в "Maven" и в "PoB",
 вы увидите, что дополнительные дешевые пул-репозиции для JUnit,
 "Rest Assured", "Jackson DataBind", "JSON Scheme Validator" тоже.
 Это дает нам больше информации о том,
 как сетевать RenovateBot в нашем репозиторе.
 Перед тем, как я включил этот "Jackson DataBind" PR,
 я попробую изменить конфигурацию,
 чтобы она изменила марку, если она выявляет "Jackson vulnerability".
 Для этого я перейду в мою основную базу кодов.
 Я открою "Renovate.json".
 Это файл конфигурации.
 Я просто буду это изменить прямо здесь,
 так что я нажму на пенцил.
 И я изменю эту "Docker".
 Я изменю "Docker" на "Jackson".
 И давайте изменим марку на "Jackson Test Label".
 Я просто буду изменить эти изменения прямо в основную базу.
 Окей, изменения изменены,
 и мы теперь проверяем марку "Jackson".
 Она должна изменить марку "Jackson Test Label".
 Если я перейду к моему пулл-реквесту,
 то я еще имею старую,
 потому что она еще смотрит на предыдущий пулл-реквест.
 Я перейду обратно к дешифровке зависимости.
 И если я проверю эту коробку,
 то что должно произойти,
 это чтобы RenovateBot снова работал на репозиторе.
 Вы видите, что через несколько секунд это снова не запускало.
 Теперь RenovateBot должен снова работать.
 Это еще имеет тот же маркер, который и в предыдущем.
 Это все еще тот же пулл-реквест.
 Я просто закрою этот пулл-реквест.
 Если я нажму "Закрою пулл-реквест",
 то я просто отчистлю эту партию.
 Окей, теперь у нас нет пулл-реквестов.
 Я вернусь обратно к дешифровке зависимости.
 Я нажму на эту коробку еще раз, чтобы RenovateBot снова работал.
 И я вижу, что здесь написано,
 что этот отдельный пулл-реквест заблокирован
 и не будет раскрыт, если вы не нажмете на эту коробку.
 Окей, давайте нажмем на эту коробку.
 И через несколько секунд эта коробка исчезнет.
 Я вернусь обратно к пулл-реквестам.
 Я вижу, что в этот раз новое пулл-реквест было создано.
 И в этот раз у нас есть маркер, который говорит "Jackson Test Label".
 Так что наша конфигурация работает. Это очень круто.
 Давайте проверим этот пулл-реквест.
 Это будет подавлять версию к 2.14.2.
 Она всего лишь 4 дня, и у вас 10% адаптации.
 Переходим к "Прибыли файлы".
 Мы видим, что здесь он подавляет версию.
 Я опроверю эти изменения.
 И скачу пулл-реквест.
 Если я проверю дешифровку зависимости снова,
 я вижу, что следующая зависимость, которую мне будет задавать подавлять,
 является "Rest Assured 5.3.0".
 Но на данный момент пулл-реквест не подавляет, потому что у нас есть цена.
 Так что, поскольку мы уже сгрупмировали 2 пулл-реквеста,
 он будет подавлять еще один час.
 Но если я просто нажму на эту дешифровку,
 то она будет заставлять создание.
 Несколько секунд позже дешифровка будет завершена.
 Если я перейду к пулл-реквесту,
 я теперь получаю подавление зависимости "Rest Assured 5.3.0".
 И снова я вижу, что это 76 дней,
 и у нас 100% уверенности, что тесты прошли.
 Это выглядит хорошо.
 Я также подавлю эту зависимость.
 Или, я бы сказал, подавлю эту зависимость.
 Я подавлю пулл-реквест и включу его вот так.
 Если я вернусь к дешифровке зависимости снова,
 мы видим, что теперь не остается ни одной зависимости, которая нужна для подавления.
 Все в нашем репозиторе полностью подавлено.
 В этом видео мы видели, как просто добавить "Renovate Bot"
 в ваш репозиторе GitHub и получить автоматическую подавление зависимости.
 Я бы очень рекомендовал сделать это.
 Автоматическое управление зависимостями в такой манере очень полезно.
 Держать трек зависимостей - это очень коммерческий процесс,
 особенно если у вас много проектов, которые вы ищете.
 И это было очень легко добавить.
 "Renovate Bot" работает фантастически, прямо из кубка.
 Немного конфигурации, которую мы сделали в этом видео,
 это просто показало некоторые опции, которые доступны.
 Никто из них не был необходим.
 Я мог бы оставить все это, и "Renovate Bot" бы все еще работал и работает
 в самом удовлетворительном смысле.
 Если вам нужно сделать больше конфигураций,
 как вы видели, есть много разных опций, которые доступны.
 Есть, буквально, все, что можно конфигурировать.
 Вы можете даже конфигурировать, чтобы не использовать определенные пакеты, если вам нравится,
 если вам не хочется, чтобы что-то было подавлено,
 или если вам хочется, чтобы ничего другого не изменилось,
 то должно быть опция для этого в конфигурации.
 Вы можете также создать и ходить "Renovate Bot" пресеты.
 И что эти позволяют вам сделать,
 это создать пресет конфигурации "Renovate Bot"
 и потом вывести эту конфигурацию в много разных репозиторий.
 Так что вы просто управляете конфигурацией в одном месте,
 что действительно мощно.
 Если вы хотите узнать больше о "Renovate Bot",
 я рекомендую, что вы исследуете их документацию.
 И их коммунальность на GitHub действительно активна и поддерживается.
 Я оставлю ссылки в описании, как обычно, если вы хотите идти и исследовать.
 Как всегда, если у вас есть вопросы, просто напишите мне в комментариях.
 Но, если нет, я увидю вас в следующем видео.

