Как вы решаете зависимости в приложении? Как вы узнаёте, что есть новая версия какой-то зависимости?
Когда вы обновляете зависимости вы можете обнаружить, что зависимость не поддерживается.
Или вы обновляете зависимости когда сканер безопасности говорит вам, что есть уязвимость?
Самое главное, вы делаете это в ручную?
Вы идете от одной зависимости к другой, а затем проверяете и обновляете иногда, в конце концов?
Или у вас есть какая-то автоматическая система обновления зависимостей?
Как на счет того чтобы создать систему, которая создает Pull request с обновлениями для всех ваших зависимостей?
Затем вы можете выбрать, хотите ли вы обновить все или некоторые их них, это ваше решение.
Или, может быть, вы наберетесь смелости чтобы не делать Pull request, а хотите, чтобы ваши зависимости были замержены прямо в главную ветку.
Именно об это и идет речь в этой статье.
Давайте посмотрим на простой проект, У меня есть файлы Go, я имею файл Docker для контейнеров,
и у меня директория K8s, где у меня есть манифесты Kubernetes.
Это как можно проще.
Теперь, этот код Go может иметь некоторые зависимости, которые могут быть до сих пор, или, может быть, они не есть.
Файл Docker может иметь некоторые зависимости, и моих манифестах Кубернетис тоже могут быть зависимости,
так что давайте посмотрим, можно ли я быть в курсе всех зависимостей, которые у меня в этом маленьком, маленьком, маленьком проекте.
Я буду использовать Renovate только для этого.
И я буду идти прямо
в репозиторий,
которые я хочу Renovate
управлять для меня.
И репозиторий в вопросе,
тот, который имеет файлы, которые я показал,
называется Renovate 2.
Я буду его выбирать,
и нажать кнопку "Совет".
И это все.
Это все, что мне нужно сделать,
до того, как Renovate вступит,
и дайте мне выбрать,
что я действительно хочу изменить,
так что нажимайте кнопку "Совет"
и расслабляйтесь.
И, пока я расслабляюсь,
вы должны знать, что вы должны подписаться,
и вы должны присоединиться к канале,
это стоимость кофе,
и вы должны "Лайкать" это видео, потому что это круто, верно?
И посмотрите, я получил почту.
Давайте посмотрим, что в ней.
И она приходит из Renovate,
сказав, что "Эй, у вас новая репозитория,
которую я контролирую для вас.
Здесь есть вещи, с которыми вы можете работать,
здесь есть вещи, которые будут происходить, и так далее.
Это предыдущая почта,
вы должны ее прочитать, я уже прочитал,
так что я буду продолжать.
И, продолжая, я имею в виду,
нажмите на ссылку
с адресом поиска пола,
который Renovate создал для нас.
Я имею в виду, эта почта сама
состоит из контента поиска пола,
так что давайте зайдем в PR и посмотрим, что там.
В основном, что она говорит,
"Эй, у вас есть два вида
детективных пакетных файлов,
один - Dockerfile, другой - GoMode,
где в зависимости от
языка Go находится,
он работает с другими языками,
так что представьте это как пример,
вы не должны использовать Go с Renovate,
он работает с почти любым.
Сомнительно, он не
делал или детектировал мои
кубернетические манифесты, но мы
об этом позже. Так что давайте посмотрим
на файлы, которые были изменены
с помощью этого поиска пола.
И, на самом деле, есть только один файл -
renovate.json, и он
простой, как можно получить,
он просто говорит, что
нужно начать использовать Renovate, и
он должен поддерживать базовый конфигуратор.
Мы можем его изменить, и
я покажу вам показы и трюки, как
изменить его позже, но это
что происходит по правилам, и большинство
из нас нуждается в правилах.
Это одна из красот Renovate.
Он просто работает
из куба, и
эксперты или
ниндзя могут изменить
свои желания, но из куба
работает довольно хорошо, так что
для многих из нас не нужно
изменить ничего. Так что давайте сменим
поиск пола и
дайте играм начать.
Давайте посмотрим, что я получу.
Немного позже я получил
новое вопрос. Теперь это
не так, как другие вопросы, которые
вы открываете в GitHub. Это
не что-то, что вы закрываете и потом открываете
новое вопрос. Вспомните это
как таблица,
так что этот вопрос должен быть открыт
все время, и Renovate обновит
этот вопрос, давять вам
сумму всех других
обновлений, всех других
пол-попросов, которые он создает для нас.
И, как правило, уже
есть два пола-попроса.
Вы, наверное, уже поняли это с самого начала.
Один для
Go-модулей, Go-библиотек, и
другой для Dockerfile.
Итак, первый пол-профил я открою
это тот, о котором я говорил о Dockerfile,
и я могу увидеть сумму
и все информацию, которую мне нужно,
и так далее. Это очень информативно,
это часть, которую мне нравится.
И я заберу все это, потому что
я уже знаком с Renovate, и я
пойду прямо к полу-профилам, которые
меняли, и мы можем увидеть,
что они изменили
базовое изображение. Мой Dockerfile
использовал GoLang 1.17,
а в современном версии 1.18,
и он просто
изменил Dockerfile, и все, что мне нужно
сделать, это отказаться от пол-профила,
поместить его в главную линию,
и тогда, какие бы процессы,
автоматизации, которые у меня в репозитории,
вы знаете, пайплайны,
Tecton, ArgoCd, или что угодно,
я могу использовать, они будут вступать
и построить новое изображение, в этом случае,
потому что Dockerfile изменился,
и я буду жить счастливо
всегда, до следующего изменения, правильно?
И второй пол-профил
об Go-депенденциях,
и процесс все еще тот же,
я имею всю сумму
изменений в пол-профиле
описание, я имею релизные ноты, и так далее,
я заберу это тоже,
и пройду прямо к файлам,
которые менялись.
Он изменил только одну зависимость,
но давайте посмотрим, что это действительно так,
когда я перейду к разнообразиям
между прежде, и сейчас,
и сейчас, и тогда, и так далее.
И посмотри на это, это не
простой изменение зависимости,
я имею в виду, он изменил одну из этих зависимостей,
но эта зависимость имеет
другие суб-зависимости,
поэтому он изменил их все,
он сделал это интеллигентно,
понимая, что есть зависимости
зависимости, и так далее,
поэтому он изменил Go-мод, который
содержит основные зависимости,
и он изменил Go-сумму, которая содержит
все хаши
всех специальных зависимостей
и зависимости зависимости, и так далее,
и так далее, поэтому он изменил
все интеллигентно, не просто
один из зависимостей, так что
я помещаю этот пул-реклама,
и возвращаюсь к моему терминалу,
у меня есть еще один вопрос,
который нужно исправить, мне нужно
выяснить, как я буду делать с
зависимостью Кубернетика, зависимости
в кубернетическом манифесте, но
прежде чем я сделаю это, дайте мне получить
новую версию моего репозитория,
потому что Ренове просто создал пул-рекламу,
и я помещаю их, и так далее,
и я могу увидеть, что теперь у меня
новая версия моего докера, и
я могу делать это, и я могу
решить с Кубернетикой, теперь вы
можете подумать, что,
как Реновейт
обнаружил, что у меня есть файл докера,
и что у меня есть зависимости в кубернетике,
но он не выяснил, что
есть какие-то кубернетические манифесты,
почему я должен
рассказать Ренове,
что есть кубернетические манифесты, и
ответ довольно простой,
кубернетические манифесты могут быть почти
любым, и они могут быть почти где-то,
и это будет немного вреда
для Реновейта, чтобы сканировать
весь репозиторий для всех ямл-файлов,
и не должно быть даже
ямл, и выяснить,
так что это будет много вреда, и я
должен помочь Реновейту
сказать, что, эта специальная
директория содержит
кубернетические манифесты, и это
точно, точно, что я
буду делать, так что я буду добавлять новую
секцию кубернетов, и я буду
сказать, что, эй, файл-матч
является директорией кубернетов, и все
ямл-файлы внутри этой
директории, я буду
совершать файл, и
вернуть его в гитхуб,
и потом я подожду
несколько минут, и
потом я могу вернуться к этому проблеме,
к дашборду, который
находится в проблеме, и мы можем увидеть, что
дашборд изменился, теперь он говорит,
эй, все зависимости, которые у вас были
раньше, они зафиксированы, но
теперь у вас есть проблема в одном из ваших
манифестов, чтобы быть более точным,
он обнаружил, что тег
изображения, который я использую,
не последний, и все, что я должен
сделать, это кликнуть на ссылку, которая
меня приведет к задаче пул, и внутри
задачи пула, я имею суммаризацию и все
информация о том, что происходит,
и я могу идти к изменениям
файлов, к изменениям файлов,
и увидеть детали того, что
Renovate предлагает, что
я должен делать, и предложение
довольно простое, эй,
используй это, теперь должно быть так,
что если вы вмешаете этот задачу пула,
вы получите последний тег
изображения, который вы используете в
кубернетическом манифесте,
так что я доверяю Renovate, я просто
собираюсь вмешать задачу пула, и
это должно быть, но есть
потенциальный вопрос, потенциальная
недостаточность в том, что
Renovate делает, или скорость того,
что Renovate делает, и я могу
показать это в одном из
файлов моего кубернетического манифеста,
так что дайте мне выключить HPA YAML,
теперь, если вы не знакомы,
если вы не эксперты в кубернетах, вы
можете сказать, эй, это выглядит хорошо, но
это не так, потому что этот
горизонтальный под-авто скейлер использует
старую версию API
V2 Beta 1,
и у нас есть V2
сейчас, мы должны использовать V2,
стабильный, готовый к производству,
вместо Beta, который я использую
сам, и я
надеялся, что Renovate
также сохранит это как зависимость,
и что это предполагает,
что я должен
изменить версию API
этого специального кубернетического ресурса,
но, к сожалению, это не
в рамках Renovate,
это не действительно управление
зависимостью кубернетов
обо всем самим файлам,
теперь, вы можете спросить,
эй, это имеет значение
зависимость? Кубернетические версии
версии ресурсов кубернетов
это что-то, что Renovate должен
управлять или нет? Я имею в виду
Go-кубернеты, которые
управляют, это 3-й партийные кубернеты,
и HPA
это 3-й партийный кубернет, в некотором смысле,
так что это могло быть
частью расширения,
я не уверен. В любом случае,
это было бы действительно, действительно хорошо, если
Renovate расширил расширение
больше того, что он делает сейчас,
он делает много, так что я не действительно
обвиняю, я просто вижу
возможность пройти дальше,
и это могло быть версии
ресурсов кубернетов, это могло быть
версии кубернетов, клустеры,
доступные в AWS или Azure,
это могло быть версии систем,
если вы используете VM, и так далее,
и так далее, так что
есть много места для развития.
Теперь, если то, что вы получаете
из коробки, не достаточно,
как и в моем случае, это не достаточно,
я должен добавить кубернетов,
адрес, который Renovate должен
контролировать для ресурсов кубернетов,
и вы можете
расширить его намного дальше, если
вы зайдете в опции конфигурации,
вы можете увидеть все доступные
переносы, которые вы можете добавить
к вашему файлу Renovate.json
и расширить или подробно подробно подробно
что он делает. Также, если вы зайдете в
платформы Renovate, мы можем увидеть, что
поддерживает Azure, Bitbucket,
Github,
и Gitlab. В основном,
все основные использования
и решения, или платформы
с ними. А затем
у нас есть менеджеры, и это немного
смешно. Например, если вы посмотрите на Docker,
вы можете увидеть, что здесь Ansible,
я имею в виду, это Docker, действительно,
Docker Compose, окей, Dockerfile,
это имеет смысл, DroneCI,
как это Docker, Gitlab CI,
и опять же, кубернетов, так что
это немного смешно, как Renovate
организует поддерживаемых менеджеров,
но что действительно имеет значение,
это то, что почти все,
что вы используете,
все разные манифесты,
которые вы используете, чтобы определить вещи,
есть. И наконец,
у нас есть данные источники.
Данные источники важны, если
вы хотите быть специфичным,
и рассказать Renovate, как найти
версии, которые он должен
искать, и какие правила, какие
фильтры, и так далее. Так что данные
источники позволяют нам подробно
поделиться, как Renovate
выбирает и выбирает,
какие будут данные для наших
зависимостей. И наконец, у нас есть
языки, которые поддерживают,
я имею в виду, что это не действительно языки,
но Bazel, Docker, Golang,
Java, JavaScript,
Node.js, Nugget, PHP,
Python и Ruby.
Теперь, если вы используете Rust,
вы должны быть защищены, и даже если вы не
защищены от коробки, вы можете
поделиться с Renovate, создавать свои правила,
рассказать Renovate, как решать
что-то, что не поддерживается
и, наконец, есть очень важный вопрос.
Сколько это стоит?
Сколько вам нужно платить, чтобы
использовать Renovate? И
новости очень хорошие.
Если вы проект Open Source,
он бесплатен. Если
вы используете GitHub, он бесплатен
также. Если он
бесплатен, то вы...
Он все еще бесплатен. Вам нужно получить лицензию
бесплатно. Я не использую
бесплатный пакет, так что я не очень уверен,
что это значит, чтобы получить лицензию бесплатно,
но... это должно быть бесплатно, я предполагаю.
В любом случае, цена
хороша так, как она может
быть золотой.
Теперь давайте поговорим о
Renovate. Что это хорошие вещи,
что это плохие вещи,
что вам нужно использовать, и
TLDR - это абсолютно потрясающе,
это фантастично. Есть только одна
негативная вещь, и это
сколп. Я думаю, что Renovate
может идти намного дальше,
чем сейчас. Я могу
увидеть Renovate в будущем,
управляя API-версиями моего
кубернетического манифеста, управляя
кубернетические версии самим, управляя
версиями оперативных систем,
и так далее. Это может идти
дальше, чем уже
есть. Это могло, теоретически,
возможно, управлять
любыми типами подавлений,
которые вы должны делать
на любые типы ресурсов.
И если Renovate продолжает расти, это, наверное,
что мы увидим в
ближайшее время. Я надеюсь,
что это. Так что эта негативная вещь
не действительно негативна,
это место для улучшения,
или место для увеличения
сколпа. С позитивной стороны,
это работает.
Просто работает. Работает из куба.
Вы говорите, что хотите, чтобы вы управляли
этот репозиториум, и в большинстве случаев
он будет делать правильное дело, без
меня делать ничего. И если
он не делает точно то, что я хочу,
я могу легко его преодолеть
Renovate.json, я могу правильно подключить, что он делает.
Так что работает из куба,
просто работает, и дефолтное
поведение - это то, что действительно работает
для большинства людей. Это
высококонфигурационно, и цена
просто правильная.
Зеро. Теперь, прежде чем я ухожу,
дайте мне дать вам очень, очень,
очень важную нотку.
Не вернитесь
только на Renovate. Renovate не
позволит вам
скачать поиски к главной линии,
это не оправдание.
Вы все еще должны иметь пайплайн, который
проверит эти изменения, который
объяснит, что все работает.
Реновать комплементирует
вашу автоматизацию.
Он убедит вас, что у вас есть полный
запрос с оправданиями
к вашим зависимостям, или что-то
другое, которое он управляет.
Он не заменяет вашу автоматизацию,
так что убедитесь, что вы проверяете
ваши оправдания, прежде чем
вы их действительно вкладываете в производство.
До новых встреч!
